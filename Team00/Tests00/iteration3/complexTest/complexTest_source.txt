procedure alpha {
	read u;									
	read o;								
	a = a * b - c + d;						
	b = z * x * (y - (a + d));			
	c = (e + f) / a * ((x - z) * q + p);	
	call charlie;							
	z = z;									
	d = z * 2 + v - 10 * y;			
	call beta;							
}

procedure beta {
	print a;								
	print b;							
	print c;							
}

procedure charlie {
	if ((d >= 0) || (((a == q) && (w < i)) && (v == c))) then {
		d = d / e - o;						
		call beta;							
	} else {
		while ((a>0) && (b < d)) {			
			a = a + b * d;					
			e = e / y - a / d;				
		}
	}
	call delta;								
}

procedure delta {
	p = 1 + 2 + 3 + 4;					
	print p;								
	p = p - a + x % q;					
	print p;							
	if (a > 1) then {					
		u = y - t;							
		while (e <= w) {				
			read s;							
			e = s + o / d;				
			if (r <= 12) then {				
				r = r * r * n;				
			} else {
				z = a + w - q * y / g;		
			}
		}
		print v;							
	} else {
		print a;							
	}
	print w;
}

procedure echo {
	read a; 
	read b; 
	c = 1;	
	d = c + 1;
	e = c + d;	

	while(a > 0) {	
		a = a - 1; 		
		b = a + c;			
		if (b > c) then {		
			d = c;			
		} else {			
			e = b;		
		}
	}
	
	a = a - b * c;		

	while ((((c > 0) && (d>0)) || (a < b)) || (e <= 20)) {
		a = c + d * b;		
		b = ((a + b) * ((c / d) - e));
		if (b <= c) then {	
			print b;		
		} else { 
			while (c >= b) {
				b = b + 1;		
				while (d >= e) {	
					d = d + e / c;
				}
				if ((a * b) < (c + d + e)) then {	
					a = a * b - c / e;	
					f = a / e - c;	
				} else { 
					if ((a) < (c+d + e)) then {	
						a = a / b - c / e * d;	
					} else { 
						f = f - a * d;	
						a = a + f;
						if (f <= 100) then {	
							print f;	
						} else {	
							while (f <= 100) {	
								f = f * f - f;
							}
						}
						a = a * d;	
					}
					z = x;
					x = x -1 * 10;
				}
				a = p * p; 
			}		
			print a; 
		}
		z = a * (y - x) + ((u - o) + q); 
	}
	c = c / a + (b - d);	

	if ((e < 10) && (a > e)) then {
		e = e + 1;			
		a = a - e;				
	} else {
		e = e - 1;			
		c = c + e;				
		while ((d <= 20) || (d < (a + b))) {
			d = d + a * (c - e);
		}

		d = d - 1;		
	}

	print a;		
	print b;		
}